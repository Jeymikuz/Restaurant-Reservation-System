@page "/reservation"

@inject RestaurantWebServer.Data.IDataAccess _db

<h3>NewRezervation</h3>

<EditForm Model="@newReservation" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />


    <div class="form-group">
        <label for="exampleFormControlSelect1">Stolik: </label>
        <InputSelect class="form-control" @bind-Value="tempTableID">
            @foreach (var table in tables)
            {
                <option value="@table.TableID">Stolik nr @table.TableID, Liczba miejsc: @table.NumberOfChairs</option>
            }
        </InputSelect>
    </div>
    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="inputEmail4">Imię</label>
            <InputText class="form-control" @bind-Value="newReservation.FirstName" />
        </div>
        <div class="form-group col-md-6">
            <label for="inputPassword4">Nazwisko</label>
            <InputText class="form-control" @bind-Value="newReservation.LastName" />
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="inputEmail4">Email</label>
            <InputText class="form-control" @bind-Value="newReservation.Email" />
        </div>
        <div class="form-group col-md-6">
            <label for="inputPassword4">Numer telefonu</label>
            <InputText class="form-control" @bind-Value="newReservation.PhoneNumber" />
        </div>
    </div>
    <div class="form-group">
        <label for="exampleFormControlSelect1">Data rezerwacji</label>
        <select class="form-control" @onchange="InitHourComboBox">
            @foreach (var day in days)
            {
                <option value="@day">@day.ToString("d/M/yyyy")</option>
            }
        </select>

    </div>
    <div class="form-group">
        <label for="exampleFormControlSelect1">Godzina rezerwacji</label>
        <InputSelect class="form-control" @bind-Value="tempHour">
            @foreach (var hour in hours)
            {
                <option value="@hour">@hour.TimeOfDay.ToString(@"hh\:mm") </option>
            }

        </InputSelect>
    </div>
    <div class="form-group">
        <label>Długość rezerwacji</label>
        <InputSelect class="form-control" @bind-Value="tempLength">
            <option>1</option>
            <option>2</option>
            <option>3</option>
            <option>4</option>
        </InputSelect>
    </div>


    <button type="submit" class="btn btn-primary">Submit</button>


</EditForm>


@code {

    Models.Reservation newReservation = new Models.Reservation();
    List<Models.Table> tables = new List<Models.Table>();

    List<DateTime> days = new List<DateTime>();
    List<DateTime> hours = new List<DateTime>();


    private string tempDate = DateTime.Now.ToString(@"d/M/yyyy");
    private string tempHour;
    private string tempLength;

    private string tempTableID;




    protected override void OnInitialized()
    {
        tempLength = "1";
        InitDayInputSelect();
    }

    protected override async Task OnInitializedAsync()
    {
        tables = await Task<Models.Table>.Run(() =>
        {
            return _db.GetAllTable();
        });
    }

    private void InitDayInputSelect()
    {

        for (double i = 0; i <= 7; i++)
        {
            var day = DateTime.Now;
            if (i > 0)
            {
                days.Add(day.Date.AddDays(i));
            }
            else
            {
                days.Add(day);
            }
        }
    }

    private void InitHourComboBox(ChangeEventArgs e)
    {
        tempDate = e.Value.ToString();
        hours.Clear();
        var dayMothYear = tempDate.Split(".");
        var temporaryDateHours = dayMothYear[2].Split(" ");
        var temporaryHours = temporaryDateHours[1].Split(":");
        var selectedDate = new DateTime(DateTime.Now.Year, int.Parse(dayMothYear[1]), int.Parse(dayMothYear[0]),int.Parse(temporaryHours[0]), int.Parse(temporaryHours[1]), int.Parse(temporaryHours[2]));

        var helperValue = selectedDate;
        var checkValue = new DateTime(helperValue.Year, helperValue.Month, helperValue.Day, 12, 0, 0);


        if (helperValue > checkValue)
        {
            var hour = RoundUp(selectedDate, TimeSpan.FromHours(1)); // 14:00:00               
            while (hour <= DateTime.Today.AddHours(20)) // 16:00:00
            {
                hours.Add(hour);
                hour = hour.AddMinutes(30);
            }
        }
        else
        {
            var today = DateTime.Now;
            var hour = RoundUp(new DateTime(today.Year, today.Month, today.Day, 12, 0, 0), TimeSpan.FromHours(1)); // 14:00:00                
            while (hour <= DateTime.Today.AddHours(20)) // 16:00:00
            {
                hours.Add(hour);
                hour = hour.AddMinutes(30);
            }
        }
    }


    private void HandleValidSubmit()
    {
        newReservation.TableID = int.Parse(tempTableID);

        var tempReservationDate = tempDate.Split(".");
        var tempResrvationHour = tempHour.Split(":");
        var tempHelperHour = tempResrvationHour[0].Split(" ");

        var ReservationTime = new DateTime(DateTime.Now.Year,int.Parse(tempReservationDate[1]),int.Parse(tempReservationDate[0]),int.Parse(tempHelperHour[1]),int.Parse(tempResrvationHour[1]),0);

        _db.InsterResevation(int.Parse(tempTableID), newReservation.FirstName, newReservation.LastName, newReservation.Email, newReservation.PhoneNumber, ReservationTime, int.Parse(tempLength));


    }

    DateTime RoundUp(DateTime dt, TimeSpan d)
    {
        return new DateTime((dt.Ticks + d.Ticks - 1) / d.Ticks * d.Ticks, dt.Kind);
    }

    private void OnButtonClicked()
    {

    }






}
